package com.project.demo.bank.exception;

import java.time.LocalDateTime;

import org.springframework.beans.ConversionNotSupportedException;
import org.springframework.beans.TypeMismatchException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingPathVariableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.multipart.support.MissingServletRequestPartException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
import com.project.demo.bank.exception.BankDemoErrors;

@ControllerAdvice
public class GlobalException extends ResponseEntityExceptionHandler {

	@Override
	protected ResponseEntity<Object> handleConversionNotSupported(ConversionNotSupportedException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(ex.getMessage());
		error.setStatus(status);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.status(status).body(error);
	}

	@Override
	protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers,
			HttpStatus status, WebRequest request) {
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(ex.getMessage());
		error.setStatus(status);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.status(status).body(error);
	}

	@Override
	protected ResponseEntity<Object> handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(ex.getMessage());
		error.setStatus(status);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.status(status).body(error);
	}

	@Override
	protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(ex.getMessage());
		error.setStatus(status);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.status(status).body(error);
	}

	@Override
	protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(ex.getMessage());
		error.setStatus(status);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.status(status).body(error);
	}

	@Override
	protected ResponseEntity<Object> handleMissingPathVariable(MissingPathVariableException ex, HttpHeaders headers,
			HttpStatus status, WebRequest request) {
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(ex.getMessage());
		error.setStatus(status);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.status(status).body(error);
	}

	@Override
	protected ResponseEntity<Object> handleMissingServletRequestPart(MissingServletRequestPartException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(ex.getMessage());
		error.setStatus(status);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.status(status).body(error);
	}

	@Override
	protected ResponseEntity<Object> handleTypeMismatch(TypeMismatchException ex, HttpHeaders headers,
			HttpStatus status, WebRequest request) {
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(ex.getMessage());
		error.setStatus(status);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.status(status).body(error);
	}
	
	public ResponseEntity<BankDemoErrors> allOtherExceptions(Exception ex){
		BankDemoErrors error = new BankDemoErrors();
		error.setMessage(" All other exception\t" + ex.getMessage());
		error.setStatus(HttpStatus.BAD_REQUEST);
		error.setTime(LocalDateTime.now());
		return ResponseEntity.ok(error);
	}
}
