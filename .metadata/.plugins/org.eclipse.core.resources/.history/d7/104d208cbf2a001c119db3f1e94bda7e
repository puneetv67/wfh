package com.project.ipldashboard.ipldashboarddemo.data;

import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;

import com.project.ipldashboard.ipldashboarddemo.model.Match;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

	@Autowired
	public JobBuilderFactory jobBuilderFactory;

	@Autowired
	public StepBuilderFactory stepBuilderFactory;
	
	@Bean
	public FlatFileItemReader<MatchInput> reader() {
	  return new FlatFileItemReaderBuilder<MatchInput>()
	    .name("matchItemReader")
	    .resource(new ClassPathResource("match_data.csv"))
	    .delimited()
	    .names(new String[]{"firstName", "lastName"})
	    .fieldSetMapper(new BeanWrapperFieldSetMapper<MatchInput>() {{
	      setTargetType(Match.class);
	    }})
	    .build();
	}

	@Bean
	public PersonItemProcessor processor() {
	  return new PersonItemProcessor();
	}

	@Bean
	public JdbcBatchItemWriter<Person> writer(DataSource dataSource) {
	  return new JdbcBatchItemWriterBuilder<Person>()
	    .itemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>())
	    .sql("INSERT INTO people (first_name, last_name) VALUES (:firstName, :lastName)")
	    .dataSource(dataSource)
	    .build();
	}
}
